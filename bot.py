"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
–ó–¥–µ—Å—å –≤—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import asyncio
import re
from typing import Optional, Tuple
from telebot import TeleBot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from loguru import logger

from config import Config
from currency_api import CurrencyAPI

class CurrencyBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞
    """
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ API
        self.config = Config()
        self.bot = TeleBot(self.config.BOT_TOKEN)
        self.currency_api = CurrencyAPI()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.add("bot.log", rotation="1 MB", level="INFO")
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._register_handlers()
    
    def _create_conversion_keyboard(self) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è–º–∏
        """
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - USDT –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        keyboard.row(
            InlineKeyboardButton("üí∞ USDT ‚Üí UAH", callback_data="template_usdt_uah"),
            InlineKeyboardButton("üí∞ USDT ‚Üí USD", callback_data="template_usdt_usd")
        )
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - USD –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏  
        keyboard.row(
            InlineKeyboardButton("üíµ USD ‚Üí UAH", callback_data="template_usd_uah"),
            InlineKeyboardButton("üíµ USD ‚Üí RUB", callback_data="template_usd_rub")
        )
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - EUR –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        keyboard.row(
            InlineKeyboardButton("üí∂ EUR ‚Üí UAH", callback_data="template_eur_uah"),
            InlineKeyboardButton("üí∂ EUR ‚Üí RUB", callback_data="template_eur_rub")
        )
        
        # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        keyboard.row(
            InlineKeyboardButton("‚Çø BTC ‚Üí USD", callback_data="template_btc_usd"),
            InlineKeyboardButton("üíé TON ‚Üí UAH", callback_data="template_ton_uah")
        )
        
        # –ü—è—Ç—ã–π —Ä—è–¥ - TRX
        keyboard.row(
            InlineKeyboardButton("üî∫ TRX ‚Üí USD", callback_data="template_trx_usd"),
            InlineKeyboardButton("üî∫ TRX ‚Üí UAH", callback_data="template_trx_uah")
        )
        
        return keyboard
    
    def _register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = self._create_conversion_keyboard()
            self.bot.reply_to(
                message, 
                self.config.MESSAGES['welcome'] + "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:",
                reply_markup=keyboard
            )
        
        @self.bot.message_handler(commands=['help'])
        def handle_help(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
            self.bot.reply_to(message, self.config.MESSAGES['help'])
        
        @self.bot.message_handler(commands=['rates'])
        def handle_rates(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rates - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã"""
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å—ã")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            rates = asyncio.run(self.currency_api.get_popular_rates())
            
            if rates:
                response = "üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫ —Ä—É–±–ª—é:\n\n"
                for currency, rate in rates.items():
                    currency_name = self.config.SUPPORTED_CURRENCIES.get(currency, currency)
                    response += f"{currency_name}: {rate:,.2f} ‚ÇΩ\n"
            else:
                response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"
            
            self.bot.reply_to(message, response)
        
        @self.bot.message_handler(commands=['convert'])
        def handle_convert_command(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            text = message.text.strip()
            if len(text.split()) > 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /convert
                logger.info(f"Convert command with args: {text}")
                self._handle_convert(message, text)
            else:  # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ /convert –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                logger.info("Convert command without args - showing currency selection")
                self._send_currency_selection(message)
        
        @self.bot.message_handler(commands=['quick'])
        def handle_quick_convert(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quick - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
            keyboard = self._create_conversion_keyboard()
            self.bot.reply_to(
                message,
                "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            text = message.text.strip()
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ —Å—É–º–º—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
            user_state = self._get_user_state(user_id)
            if user_state and user_state.get('waiting_for_amount'):
                self._handle_amount_input(message, user_state)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–∞ "/convert 100 usdt to uah"
            if text.lower().startswith('/convert '):
                self._handle_convert(message, text)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "100 USD")
            if self._is_quick_convert(text):
                self._handle_quick_convert(message, text)
            else:
                # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
                help_text = """
‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:

üìù **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/convert 100 USDT to UAH`
‚Ä¢ `/convert 50 USD to RUB` 
‚Ä¢ `/convert 1000 RUB to UAH`
‚Ä¢ `/convert 0.1 BTC to USD`

üí° **–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /convert –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã**
                """
                
                self.bot.reply_to(message, help_text)
        
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
            try:
                data = call.data
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
                
                if data.startswith("template_"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                    self._handle_template_selection(call)
                elif data == "back_to_currencies":
                    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                    self._handle_back_to_currencies(call)
                    
                # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
                self.bot.answer_callback_query(call.id)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    
    def _handle_template_selection(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—ã –∏–∑ callback_data
        template_parts = call.data.split("_")  # ['template', 'usdt', 'uah']
        from_currency = template_parts[1].upper()
        to_currency = template_parts[2].upper()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
        currency_from_name = self.config.SUPPORTED_CURRENCIES.get(from_currency, from_currency)
        currency_to_name = self.config.SUPPORTED_CURRENCIES.get(to_currency, to_currency)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä—É", callback_data="back_to_currencies"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        new_text = f"üí± –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {currency_from_name} ‚Üí {currency_to_name}\n\n"
        new_text += f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {from_currency}:\n\n"
        new_text += f"üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—É–º–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if from_currency == "USDT":
            new_text += "‚Ä¢ 100 (–¥–ª—è 100 USDT)\n‚Ä¢ 50.5 (–¥–ª—è 50.5 USDT)"
        elif from_currency == "USD":
            new_text += "‚Ä¢ 100 (–¥–ª—è 100 USD)\n‚Ä¢ 25.75 (–¥–ª—è 25.75 USD)"
        elif from_currency == "EUR":
            new_text += "‚Ä¢ 50 (–¥–ª—è 50 EUR)\n‚Ä¢ 75.25 (–¥–ª—è 75.25 EUR)"
        elif from_currency == "UAH":
            new_text += "‚Ä¢ 1000 (–¥–ª—è 1000 UAH)\n‚Ä¢ 2500 (–¥–ª—è 2500 UAH)"
        elif from_currency in ["BTC", "ETH"]:
            new_text += "‚Ä¢ 0.1 (–¥–ª—è 0.1 BTC)\n‚Ä¢ 0.025 (–¥–ª—è 0.025 BTC)"
        elif from_currency in ["TRX", "TON"]:
            new_text += "‚Ä¢ 1000 (–¥–ª—è 1000 TRX)\n‚Ä¢ 5000 (–¥–ª—è 5000 TRX)"
        else:
            new_text += "‚Ä¢ 100 (–¥–ª—è 100)\n‚Ä¢ 50.5 (–¥–ª—è 50.5)"
        
        new_text += f"\n\n‚ö° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ!"
        
        self.bot.edit_message_text(
            text=new_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∂–¥–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã)
        self._save_user_state(call.from_user.id, from_currency, to_currency)
    
    def _handle_back_to_currencies(self, call: CallbackQuery):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
        """
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if call.from_user.id in self._user_states:
            del self._user_states[call.from_user.id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        self._send_currency_selection(call.message)
    
    def _send_currency_selection(self, message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
        """
        keyboard = InlineKeyboardMarkup()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        currency_pairs = [
            ("USDT", "UAH", "üí∞ USDT ‚Üí UAH"),
            ("USD", "UAH", "üíµ USD ‚Üí UAH"),
            ("EUR", "UAH", "üí∂ EUR ‚Üí UAH"),
            ("RUB", "UAH", "‚ÇΩ RUB ‚Üí UAH"), 
            ("USDT", "USD", "üí∞ USDT ‚Üí USD"),
            ("BTC", "USD", "‚Çø BTC ‚Üí USD"),
            ("ETH", "USD", "‚ü† ETH ‚Üí USD"),
            ("TON", "USD", "üíé TON ‚Üí USD"),
            ("TRX", "USD", "üî• TRX ‚Üí USD"),
            ("RUB", "USD", "‚ÇΩ RUB ‚Üí USD")
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
        for from_curr, to_curr, display_name in currency_pairs:
            callback_data = f"template_{from_curr.lower()}_{to_curr.lower()}"
            keyboard.row(InlineKeyboardButton(display_name, callback_data=callback_data))
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
        text += "üìä –î–æ—Å—Ç—É–ø–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        text += "‚ö° –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
        
        if hasattr(message, 'message_id'):  # –≠—Ç–æ callback query
            self.bot.edit_message_text(
                text=text,
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=keyboard
            )
        else:  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=keyboard
            )
    
    def _save_user_state(self, user_id: int, from_currency: str, to_currency: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –æ–Ω –≤—ã–±—Ä–∞–ª)
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if not hasattr(self, '_user_states'):
            self._user_states = {}
        
        self._user_states[user_id] = {
            'from_currency': from_currency,
            'to_currency': to_currency,
            'waiting_for_amount': True
        }
    
    def _get_user_state(self, user_id: int):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not hasattr(self, '_user_states'):
            return None
        return self._user_states.get(user_id)
    
    def _handle_amount_input(self, message: Message, user_state: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É
            amount_text = message.text.strip().replace(',', '.')
            amount = float(amount_text)
            
            if amount <= 0:
                self.bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if amount > 1000000000:  # –õ–∏–º–∏—Ç –≤ –º–∏–ª–ª–∏–∞—Ä–¥
                self.bot.reply_to(message, "‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            from_currency = user_state['from_currency']
            to_currency = user_state['to_currency']
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            self._perform_conversion(message, amount, from_currency, to_currency)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._clear_user_state(message.from_user.id)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            keyboard = InlineKeyboardMarkup()
            keyboard.row(InlineKeyboardButton("üîÑ –ï—â–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", callback_data="back_to_currencies"))
            self.bot.send_message(
                message.chat.id,
                "üí° –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é?",
                reply_markup=keyboard
            )
            
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ
            self.bot.reply_to(
                message, 
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n\nüìù –ü—Ä–∏–º–µ—Ä—ã: 100, 50.5, 0.25\n\nüí∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
    
    def _clear_user_state(self, user_id: int):
        """
        –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if hasattr(self, '_user_states') and user_id in self._user_states:
            del self._user_states[user_id]
    
    def _handle_template_selection(self, call: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—ã –∏–∑ callback_data
        template_parts = call.data.split("_")  # ['template', 'usdt', 'uah']
        from_currency = template_parts[1].upper()
        to_currency = template_parts[2].upper()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
        currency_from_name = self.config.SUPPORTED_CURRENCIES.get(from_currency, from_currency)
        currency_to_name = self.config.SUPPORTED_CURRENCIES.get(to_currency, to_currency)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä—É", callback_data="back_to_currencies"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        new_text = f"üí± –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {currency_from_name} ‚Üí {currency_to_name}\n\n"
        new_text += f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {from_currency}:\n\n"
        new_text += f"üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—É–º–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if from_currency == "USDT":
            new_text += "‚Ä¢ 100 (–¥–ª—è 100 USDT)\n‚Ä¢ 50.5 (–¥–ª—è 50.5 USDT)"
        elif from_currency == "USD":
            new_text += "‚Ä¢ 100 (–¥–ª—è 100 USD)\n‚Ä¢ 25.75 (–¥–ª—è 25.75 USD)"
        elif from_currency == "EUR":
            new_text += "‚Ä¢ 50 (–¥–ª—è 50 EUR)\n‚Ä¢ 75.25 (–¥–ª—è 75.25 EUR)"
        elif from_currency == "UAH":
            new_text += "‚Ä¢ 1000 (–¥–ª—è 1000 UAH)\n‚Ä¢ 2500 (–¥–ª—è 2500 UAH)"
        elif from_currency in ["BTC", "ETH"]:
            new_text += "‚Ä¢ 0.1 (–¥–ª—è 0.1 BTC)\n‚Ä¢ 0.025 (–¥–ª—è 0.025 BTC)"
        elif from_currency in ["TRX", "TON"]:
            new_text += "‚Ä¢ 1000 (–¥–ª—è 1000 TRX)\n‚Ä¢ 5000 (–¥–ª—è 5000 TRX)"
        else:
            new_text += "‚Ä¢ 100 (–¥–ª—è 100)\n‚Ä¢ 50.5 (–¥–ª—è 50.5)"
        
        new_text += f"\n\n‚ö° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ!"
        
        self.bot.edit_message_text(
            text=new_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∂–¥–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã)
        self._save_user_state(call.from_user.id, from_currency, to_currency)
    
    def _handle_back_to_currencies(self, call: CallbackQuery):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        """
        keyboard = self._create_conversion_keyboard()
        new_text = "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        self._clear_user_state(call.from_user.id)
        
        self.bot.edit_message_text(
            text=new_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
    
    def _is_quick_convert(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        """
        # –£–±—Ä–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        return False
    
    def _handle_back_to_currencies(self, call: CallbackQuery):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        """
        keyboard = self._create_conversion_keyboard()
        new_text = "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        
        self.bot.edit_message_text(
            text=new_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
    
    def _perform_conversion_callback(self, call: CallbackQuery, amount: float, from_currency: str, to_currency: str):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            logger.info(f"Callback –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {from_currency} –≤ {to_currency}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = asyncio.run(self.currency_api.convert_currency(amount, from_currency, to_currency))
            
            if result:
                converted_amount, exchange_rate = result
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                from_name = self.config.SUPPORTED_CURRENCIES[from_currency]
                to_name = self.config.SUPPORTED_CURRENCIES[to_currency]
                
                response = f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                response += f"üìä {amount:,.2f} {from_name}\n"
                response += f"üîÑ {converted_amount:,.2f} {to_name}\n\n"
                response += f"üìà –ö—É—Ä—Å: 1 {from_currency} = {exchange_rate:,.4f} {to_currency}\n\n"
                response += "üí° –•–æ—Ç–∏—Ç–µ –µ—â–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é? –ù–∞–∂–º–∏—Ç–µ /quick"
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                keyboard = InlineKeyboardMarkup()
                keyboard.row(InlineKeyboardButton("üîÑ –ï—â–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", callback_data="back_to_currencies"))
                
                self.bot.edit_message_text(
                    text=response,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=keyboard
                )
                
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è callback –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {from_currency} = {converted_amount} {to_currency}")
                
            else:
                self.bot.edit_message_text(
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ callback –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            self.bot.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )

    def _is_quick_convert(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        –ü—Ä–∏–º–µ—Ä—ã: "100 USD", "0.5 BTC", "50 EUR"
        """
        pattern = r'^\d+(?:\.\d+)?\s+[A-Z]{3,4}$'
        return bool(re.match(pattern, text.upper()))
    
    def _handle_quick_convert(self, message: Message, text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ä—É–±–ª–∏
        """
        try:
            parts = text.upper().split()
            amount = float(parts[0])
            from_currency = parts[1]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._perform_conversion(message, amount, from_currency, self.config.DEFAULT_TARGET_CURRENCY)
            
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            self.bot.reply_to(message, self.config.MESSAGES['invalid_format'])
    
    def _handle_convert(self, message: Message, text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        –ü—Ä–∏–º–µ—Ä—ã: "/convert 100 USD to EUR", "/convert 0.5 BTC to RUB"
        """
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        parsed = self._parse_convert_command(text)
        
        if not parsed:
            self.bot.reply_to(message, self.config.MESSAGES['invalid_format'])
            return
        
        amount, from_currency, to_currency = parsed
        self._perform_conversion(message, amount, from_currency, to_currency)
    
    def _parse_convert_command(self, text: str) -> Optional[Tuple[float, str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        
        Returns:
            Tuple[float, str, str]: (—Å—É–º–º–∞, –∏—Å—Ö–æ–¥–Ω–∞—è_–≤–∞–ª—é—Ç–∞, —Ü–µ–ª–µ–≤–∞—è_–≤–∞–ª—é—Ç–∞)
        """
        try:
            # –£–±–∏—Ä–∞–µ–º /convert –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            text = text.replace('/convert', '').strip()
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω: "100 USD to EUR" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
            pattern = r'(\d+(?:\.\d+)?)\s+([a-zA-Z]{3,4})\s+(?:to|TO)\s+([a-zA-Z]{3,4})'
            match = re.match(pattern, text, re.IGNORECASE)
            
            if match:
                amount = float(match.group(1))
                from_currency = match.group(2).upper()
                to_currency = match.group(3).upper()
                
                logger.info(f"Parsed convert command: {amount} {from_currency} -> {to_currency}")
                return amount, from_currency, to_currency
            
            logger.warning(f"Failed to parse convert command: '{text}'")
            return None
            
        except (ValueError, AttributeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    def _perform_conversion(self, message: Message, amount: float, from_currency: str, to_currency: str):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∞–ª—é—Ç
            if from_currency not in self.config.SUPPORTED_CURRENCIES:
                currencies = ', '.join(self.config.SUPPORTED_CURRENCIES.keys())
                error_msg = self.config.MESSAGES['unsupported_currency'].format(currencies=currencies)
                self.bot.reply_to(message, error_msg)
                return
            
            if to_currency not in self.config.SUPPORTED_CURRENCIES:
                currencies = ', '.join(self.config.SUPPORTED_CURRENCIES.keys())
                error_msg = self.config.MESSAGES['unsupported_currency'].format(currencies=currencies)
                self.bot.reply_to(message, error_msg)
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {amount} {from_currency} –≤ {to_currency}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = asyncio.run(self.currency_api.convert_currency(amount, from_currency, to_currency))
            
            if result:
                converted_amount, exchange_rate = result
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                from_name = self.config.SUPPORTED_CURRENCIES[from_currency]
                to_name = self.config.SUPPORTED_CURRENCIES[to_currency]
                
                response = f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n\n"
                response += f"üìä {amount:,.2f} {from_name}\n"
                response += f"üîÑ {converted_amount:,.2f} {to_name}\n\n"
                response += f"üìà –ö—É—Ä—Å: 1 {from_currency} = {exchange_rate:,.4f} {to_currency}"
                
                self.bot.reply_to(message, response)
                
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {from_currency} = {converted_amount} {to_currency}")
                
            else:
                self.bot.reply_to(message, self.config.MESSAGES['error'])
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {from_currency} -> {to_currency}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            self.bot.reply_to(message, self.config.MESSAGES['error'])
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if not self.config.BOT_TOKEN:
                logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º.")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            self.bot.infinity_polling(timeout=10, long_polling_timeout=5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = CurrencyBot()
        bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()